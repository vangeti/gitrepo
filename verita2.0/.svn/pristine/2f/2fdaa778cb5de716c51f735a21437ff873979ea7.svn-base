<div class="row">
	<div class="panel panel-default drilDownPanel">
		<div class="panel-heading">
			<div class="panel-title">Diagnostic Analysis</div>
		</div>
		<div class="panel-body drilDownPanel-Body">
			<div class="row diagnoseRRmarginTop">
				<div class="col-md-6">
					<div id="sev_chart"></div>
				</div>
				<div class="col-md-6">
					<div id="app_chart"></div>
				</div>
			</div>
			<div class="row diagnoseRRmarginBottom">
				<div class="col-md-6">
					<div id="detect_chart"></div>
				</div>
				<div class="col-md-6">
					<div id="close_chart"></div>
				</div>
			</div>
			<div class="row" align="right">
				<span> <a href="javascript:dc.filterAll();dc.redrawAll();">
						<button class="btn btn-primary">Reset All Filters</button>
				</a>
				</span>
			</div>
		</div>
	</div>
</div>
<script type="text/javascript" src="views/lib/js/crossfilter.js"></script>
<script type="text/javascript" src="views/lib/js/dc-latest.js"></script>
<script src='views/lib/js/d3.js' type='text/javascript'></script>
<script src='views/lib/dcJS/diagnose_charts.js' type='text/javascript'></script>
<!-- <script type="text/javascript">
		//d3.json('testing_data1.json', function(error, data) {
		d3.csv('views/lib/ALM_Defects.csv', function(error, data) {
			//console.log(data.defects);
			if (error)
				throw new Error(error);

			//var dataSet = data.defects;
			var dataSet = data;

			var dateFormat = d3.time.format("%d-%m-%Y");
			//var dateFormat = d3.time.format("%Y-%m-%d;%H:%M:%S.%L");

			dataSet.forEach(function(d) {
				//console.log(d.Closing_Date);
				d.Closing_Date = dateFormat.parse(d.Closing_Date);
				d.Detected_on_Date = dateFormat.parse(d.Detected_on_Date);
				//d.Closing_Date.setDate(1);
			});

			var ndx = crossfilter(dataSet);

			var severityDimension = ndx.dimension(function(d) {
				return d.Severity;
			});
			var appDimension = ndx.dimension(function(d) {
				return d.Application_Name;
			});

			var detectedDate = ndx.dimension(function(d) {
				return d.Detected_on_Date;
			});
			var detectedDateGroup = detectedDate.group();
			//var detectedDateGroup = detectedDate.group().reduceSum(function(d) {return d.Detected_on_Date;});

			var closeDate = ndx.dimension(function(d) {
				return d.Closing_Date;
			});
			//console.log(closeDate);
			//var closeDateGroup = closeDate.group();
			var closeDateGroup = closeDate.group().reduceCount();
			//var closeDateGroup = closeDate.group().reduceSum(function(d) {return d.Closing_Date;});

			var bugsBySeverity = severityDimension.group();
			var bugsByApp = appDimension.group();

			var severityGroup = severityDimension.group();
			var appGroup = appDimension.group();

			var all = ndx.groupAll();

			var totalBugsSeverity = severityDimension.group().reduceSum(
					function(d) {
						return d.Severity;
					});

			var totalBugsApp = appDimension.group().reduceSum(function(d) {
				return d.Application_Name;
			});

			var detectMinDate = detectedDate.bottom(1)[0].Detected_on_Date;
			var detectMaxDate = detectedDate.top(1)[0].Detected_on_Date;

			var closeMinDate = closeDate.bottom(1)[0].Closing_Date;
			var closeMaxDate = closeDate.top(1)[0].Closing_Date;

			var sevChart = dc.barChart('#sev_chart');
			var appChart = dc.barChart('#app_chart');
			var detectChart = dc.lineChart('#detect_chart');
			var closeChart = dc.lineChart('#close_chart');

			var totalBugs = dc.numberDisplay("#total-bugs");

			totalBugs.formatNumber(d3.format("d")).valueAccessor(function(d) {
				return d;
			}).group(all);

			sevChart.width(500).height(250).transitionDuration(1000)
					.clipPadding(10)

					//.brushOn(false)
					.xAxisLabel('Severity Level').yAxisLabel('Bug Count')
					.dimension(severityDimension).group(severityGroup)
					//.group(totalBugsSeverity)
					.elasticX(true).elasticY(true).centerBar(false).x(
							d3.scale.ordinal().domain(severityDimension))
					.xUnits(dc.units.ordinal).renderHorizontalGridLines(true)
					.renderVerticalGridLines(true).gap(10).barPadding(0.1)
					.outerPadding(0.1).renderLabel(true).xAxis();

			appChart.width(500).height(250).transitionDuration(1000)
					.clipPadding(10)
					//.brushOn(false)
					.colors([ '#ff884d' ]).xAxisLabel('Application Name')
					.yAxisLabel('Bug Count').dimension(appDimension).group(
							appGroup)
					//.group(totalBugsApp)
					.elasticX(true).elasticY(true).centerBar(false).x(
							d3.scale.ordinal().domain(appDimension)).xUnits(
							dc.units.ordinal).renderHorizontalGridLines(true)
					.renderVerticalGridLines(true).gap(10).barPadding(0.1)
					.outerPadding(0.1).renderLabel(true).xAxis();

			detectChart.width(500).height(250).margins({
				top : 10,
				right : 50,
				bottom : 60,
				left : 50
			}).dimension(detectedDate).group(detectedDateGroup)
					.renderArea(true).transitionDuration(500).x(
							d3.time.scale().domain(
									[ detectMinDate, detectMaxDate ]))
					.elasticX(true).elasticY(true).brushOn(false)
					.renderHorizontalGridLines(true).renderVerticalGridLines(
							true).xAxisLabel("Detect Date").yAxisLabel(
							"Bug Count").on(
							'renderlet',
							function(chart) {

								chart.selectAll('rect').on("click",
										function(d) {
											/* console.log("click!", d); */
										});

								chart.selectAll("g.x text").attr('dx', '-30')
										.attr('dy', '0').attr('transform',
												"rotate(-55)");

							})

			/* .renderlet(function (chart) {
					chart.selectAll("g.x text")
					  .attr('dx', '-30')
					  .attr('dy', '0')
					  .attr('transform', "rotate(-55)");
				}) */
			//.yAxis().ticks(16)
			;

			closeChart.width(500).height(250).margins({
				top : 10,
				right : 50,
				bottom : 60,
				left : 50
			}).dimension(closeDate).group(closeDateGroup).renderArea(true)
					.transitionDuration(500).x(
							d3.time.scale().domain(
									[ closeMinDate, closeMaxDate ])).elasticX(
							true).elasticY(true).brushOn(false)
					.renderHorizontalGridLines(true).renderVerticalGridLines(
							true).xAxisLabel("Close Date").yAxisLabel(
							"Bug Count").on(
							'renderlet',
							function(chart) {
								chart.selectAll("g.x text").attr('dx', '-30')
										.attr('dy', '0').attr('transform',
												"rotate(-55)");

							})
					/* .renderlet(function (chart) {
							chart.selectAll("g.x text")
							  .attr('dx', '-30')
							  .attr('dy', '0')
							  .attr('transform', "rotate(-55)");
						}) */
					.yAxis().ticks(6);

			dc.renderAll();

		});
	</script> -->